generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  email        String?   @unique
  passwordHash String    @map("password_hash")
  role         UserRole  @default(USER)
  isActive     Boolean   @default(true) @map("is_active")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  videoProgress VideoProgress[]
  permissions   Permission[]

  @@map("users")
  @@index([username])
  @@index([email])
}

model VideoProgress {
  id            String    @id @default(cuid())
  filePath      String
  watchProgress Float     @default(0)
  watchTime     Float?
  isLiked       Boolean   @default(false)
  likedAt       DateTime?
  isInWatchlist Boolean   @default(false)
  watchlistAt   DateTime?
  lastWatched   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String?   @map("user_id")

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("video_progress")
  @@index([userId])
  @@unique([filePath, userId])
}

model Permission {
  id             String           @id @default(cuid())
  userId         String           @map("user_id")
  directoryPath  String           @map("directory_path")
  canRead        Boolean          @default(true) @map("can_read")
  canWrite       Boolean          @default(false) @map("can_write")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("permissions")
  @@index([userId])
  @@index([directoryPath])
  @@unique([userId, directoryPath])
}

model VideoMetadata {
  id                    String    @id @default(cuid())
  filePath              String    @unique
  fileName              String
  title                 String
  fileSize              BigInt    @default(0)
  episode               Int?
  year                  Int?
  lastModified          DateTime
  scannedAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  duration              Int?
  metadata_extracted_at DateTime?
  thumbnail_path        String?
  videoId               String?   @unique

  @@index([title])
  @@index([fileName])
  @@index([filePath])
  @@index([videoId])
  @@map("video_metadata")
}

model ScanStatus {
  id           String   @id @default("scan_status")
  lastFullScan DateTime @default(dbgenerated("'1970-01-01 00:00:00 +00:00'"))
  isScanning   Boolean  @default(false)
  scanProgress Float    @default(0)
  totalFiles   Int      @default(0)
  updatedAt    DateTime @updatedAt

  @@map("scan_status")
}

model ScanCheckpoint {
  id                    String   @id @default("scan_checkpoint")
  scanId                String
  scanType              String
  phase                 String
  currentDirectoryIndex Int      @default(0)
  processedFiles        Int      @default(0)
  totalFiles            Int      @default(0)
  lastProcessedPath     String?
  metadataCompleted     Boolean  @default(false)
  startedAt             DateTime @default(now())
  lastCheckpointAt      DateTime @default(now())
  errorMessage          String?
  isValid               Boolean  @default(true)

  @@map("scan_checkpoint")
}
